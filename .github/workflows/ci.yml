name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-toolkits:
    name: Detect Toolkits
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      matrix: ${{ steps.discover.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Collect toolkit manifests
        id: discover
        run: |
          python - <<'PY'
          import json
          import os
          import pathlib

          toolkits = []
          for manifest in sorted(pathlib.Path('toolkits').rglob('toolkit.json')):
              toolkit_dir = manifest.parent
              with manifest.open(encoding='utf-8') as handle:
                  data = json.load(handle)
              slug = (data.get('slug') or toolkit_dir.name).strip().lower().replace(' ', '-') or toolkit_dir.name
              toolkits.append({'slug': slug, 'path': str(toolkit_dir)})

          if not toolkits:
              raise SystemExit('No toolkit manifests found.')

          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
              fh.write('matrix=' + json.dumps(toolkits) + '\n')
          PY
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run test suite
        run: pytest

  frontend-tests:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    env:
      CI: 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test

      - name: Build production bundle
        run: npm run build

  package-toolkits:
    name: Package Toolkit (${{ matrix.toolkit.slug }})
    needs: detect-toolkits
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        toolkit: ${{ fromJSON(needs.detect-toolkits.outputs.matrix) }}
    env:
      CI: 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Package toolkit
        run: |
          set -euo pipefail
          python toolkits/scripts/package_all_toolkits.py \
            --destination /tmp/toolkits \
            --force \
            --toolkits-dir "${{ matrix.toolkit.path }}"

      - name: Upload toolkit archive
        uses: actions/upload-artifact@v4
        with:
          name: toolkit-${{ matrix.toolkit.slug }}
          path: /tmp/toolkits/${{ matrix.toolkit.slug }}_toolkit.zip
          if-no-files-found: error

  build-images:
    name: Build and Push Images (${{ matrix.image.name }})
    needs:
      - backend-tests
      - frontend-tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        image:
          - name: backend
            context: backend
            dockerfile: backend/Dockerfile
          - name: frontend
            context: frontend
            dockerfile: frontend/Dockerfile
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ${{ matrix.image.name }} image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.image.context }}
          file: ${{ matrix.image.dockerfile }}
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image.name }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image.name }}:${{ github.sha }}
