name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run test suite
        run: pytest

  frontend-tests:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    env:
      CI: 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test

      - name: Build production bundle
        run: npm run build

  package-toolkits:
    name: Package Toolkits
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Package bundled toolkits
        run: |
          set -euo pipefail
          python <<'PY'
import json
import pathlib
import subprocess
import sys

dest = pathlib.Path('/tmp/toolkits')
dest.mkdir(parents=True, exist_ok=True)

manifests = sorted(pathlib.Path('toolkits').rglob('toolkit.json'))
if not manifests:
    raise SystemExit('No toolkit manifests found.')

for manifest_path in manifests:
    toolkit_dir = manifest_path.parent
    with manifest_path.open() as handle:
        manifest = json.load(handle)
    slug = (manifest.get('slug') or toolkit_dir.name).strip().lower().replace(' ', '-') or toolkit_dir.name
    output_path = dest / f"{slug}_toolkit.zip"
    subprocess.run(
        [sys.executable, 'toolkits/scripts/package_toolkit.py', str(toolkit_dir), '--force', '--output', str(output_path)],
        check=True,
    )
    print(f"Packaged {slug} toolkit from {toolkit_dir}")
PY

      - name: Upload toolkit archives
        uses: actions/upload-artifact@v4
        with:
          name: toolkits
          path: /tmp/toolkits/*.zip
          if-no-files-found: error
