apiVersion: v1
kind: ConfigMap
metadata:
  name: toolbox-backend-config
  namespace: sre-toolbox
data:
  auth-providers.json: |-
    [
      {
        "name": "local",
        "type": "local",
        "display_name": "Local Accounts",
        "enabled": true,
        "allow_registration": false,
        "default_roles": ["toolkit.user"]
      },
      {
        "name": "okta",
        "type": "oidc",
        "display_name": "Okta",
        "enabled": false,
        "discovery_url": "https://YOUR_OKTA_DOMAIN/.well-known/openid-configuration",
        "client_id": "OKTA_CLIENT_ID",
        "client_secret_vault": {
          "mount": "sre",
          "path": "auth/okta",
          "key": "client_secret",
          "engine": "kv-v2"
        },
        "redirect_base_url": "http://localhost:5173",
        "scopes": ["openid", "profile", "email"],
        "group_claim": "groups",
        "role_mappings": {
          "sre-admins": ["system.admin"],
          "sre-curators": ["toolkit.curator"]
        }
      },
      {
        "name": "azuread",
        "type": "oidc",
        "display_name": "Azure AD",
        "enabled": false,
        "discovery_url": "https://login.microsoftonline.com/YOUR_TENANT_ID/v2.0/.well-known/openid-configuration",
        "client_id": "AZURE_CLIENT_ID",
        "client_secret_vault": {
          "mount": "sre",
          "path": "auth/azuread",
          "key": "client_secret",
          "engine": "kv-v2"
        },
        "redirect_base_url": "http://localhost:5173",
        "scopes": ["openid", "profile", "email"],
        "group_claim": "roles",
        "role_mappings": {
          "SRE-Operations": ["toolkit.curator"],
          "SRE-Admins": ["system.admin"]
        },
        "use_pkce": true
      },
      {
        "name": "corp-ldap",
        "type": "ldap",
        "display_name": "Corporate LDAP",
        "enabled": false,
        "server_uri": "ldaps://ldap.example.com",
        "bind_dn": "cn=service,ou=system,dc=example,dc=com",
        "bind_password_vault": {
          "mount": "sre",
          "path": "auth/ldap",
          "key": "bind_password",
          "engine": "kv-v2"
        },
        "user_search_base": "ou=people,dc=example,dc=com",
        "user_filter": "(&(objectClass=person)(uid={username}))",
        "group_search_base": "ou=groups,dc=example,dc=com",
        "group_filter": "(&(objectClass=groupOfNames)(member={user_dn}))",
        "role_mappings": {
          "cn=sre-admins,ou=groups,dc=example,dc=com": ["system.admin"],
          "cn=sre-operators,ou=groups,dc=example,dc=com": ["toolkit.curator"]
        }
      },
      {
        "name": "corp-ad",
        "type": "active_directory",
        "display_name": "Active Directory",
        "enabled": false,
        "server_uri": "ldaps://dc1.example.corp",
        "default_domain": "example.corp",
        "bind_dn": "CN=ServiceAccount,OU=Service,DC=example,DC=corp",
        "bind_password_vault": {
          "mount": "sre",
          "path": "auth/ad",
          "key": "bind_password",
          "engine": "kv-v2"
        },
        "user_search_base": "OU=Users,DC=example,DC=corp",
        "user_filter": "(&(objectClass=user)(sAMAccountName={username}))",
        "group_search_base": "OU=Groups,DC=example,DC=corp",
        "group_filter": "(&(objectClass=group)(member={user_dn}))",
        "role_mappings": {
          "CN=ToolboxAdmins,OU=Groups,DC=example,DC=corp": ["system.admin"],
          "CN=ToolboxOperators,OU=Groups,DC=example,DC=corp": ["toolkit.curator"]
        }
      }
    ]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: toolbox-vault-config
  namespace: sre-toolbox
data:
  local.hcl: |-
    ui = true
    api_addr = "http://toolbox-vault:8200"
    cluster_addr = "http://toolbox-vault:8201"

    storage "file" {
      path = "/vault/data"
    }

    listener "tcp" {
      address = "0.0.0.0:8200"
      cluster_address = "0.0.0.0:8201"
      tls_disable = 1
    }

    default_lease_ttl = "168h"
    max_lease_ttl = "720h"
  entrypoint.sh: |-
    #!/bin/sh
    set -eu

    VAULT_SERVER_CONFIG_PATH=${VAULT_SERVER_CONFIG_PATH:-/vault/config/local.hcl}
    VAULT_CONFIG_PATH=${VAULT_SERVER_CONFIG_PATH}
    VAULT_ADDR_INTERNAL=${VAULT_ADDR_INTERNAL:-http://127.0.0.1:${VAULT_LISTEN_PORT:-8200}}
    VAULT_BIN=${VAULT_BIN:-vault}
    UNSEAL_KEY=${VAULT_UNSEAL_KEY:-}
    UNSEAL_KEY_FILE=${VAULT_UNSEAL_KEY_FILE:-}

    if [ ! -f "${VAULT_CONFIG_PATH}" ]; then
      if [ -n "${VAULT_LOCAL_CONFIG:-}" ]; then
        printf '%s\n' "${VAULT_LOCAL_CONFIG}" > /tmp/vault-local-config.json
        VAULT_CONFIG_PATH=/tmp/vault-local-config.json
      else
        echo "[vault-entrypoint] No Vault configuration found at ${VAULT_CONFIG_PATH} and VAULT_LOCAL_CONFIG is empty." >&2
        exit 1
      fi
    fi

    ${VAULT_BIN} server -config="${VAULT_CONFIG_PATH}" &
    VAULT_PID=$!

    cleanup() {
      kill "${VAULT_PID}" 2>/dev/null || true
      wait "${VAULT_PID}" 2>/dev/null || true
    }
    trap cleanup INT TERM

    export VAULT_ADDR="${VAULT_ADDR_INTERNAL}"

    attempt=0
    status_json=""
    while true; do
      status_json=$(${VAULT_BIN} status -format=json 2>/tmp/vault-status.err || true)
      if echo "${status_json}" | grep -q '"initialized"'; then
        break
      fi
      attempt=$((attempt + 1))
      if [ "${attempt}" -ge 60 ]; then
        echo "[vault-entrypoint] Vault failed to start within timeout" >&2
        cat /tmp/vault-status.err >&2 || true
        cleanup
        exit 1
      fi
      sleep 1
    done

    initialized=$(echo "${status_json}" | sed -n 's/.*"initialized"[[:space:]]*:[[:space:]]*\(true\|false\).*/\1/p' | head -n1)
    sealed=$(echo "${status_json}" | sed -n 's/.*"sealed"[[:space:]]*:[[:space:]]*\(true\|false\).*/\1/p' | head -n1)
    initialized=${initialized:-false}
    sealed=${sealed:-true}

    if [ "${initialized}" != "true" ]; then
      echo "[vault-entrypoint] Vault is not initialised. Complete initialisation manually before relying on auto-unseal." >&2
      wait "${VAULT_PID}"
    fi

    if [ "${sealed}" = "true" ]; then
      key="${UNSEAL_KEY}"
      if [ -z "${key}" ] && [ -n "${UNSEAL_KEY_FILE}" ] && [ -f "${UNSEAL_KEY_FILE}" ]; then
        key=$(cat "${UNSEAL_KEY_FILE}")
      fi
      if [ -z "${key}" ] && [ -n "${UNSEAL_KEY_FILE}" ]; then
        echo "[vault-entrypoint] Unseal key file not found: ${UNSEAL_KEY_FILE}" >&2
      fi
      key=$(printf '%s' "${key}" | tr -d '\r\n')
      if [ -z "${key}" ]; then
        echo "[vault-entrypoint] Vault is sealed and no unseal key provided (set VAULT_UNSEAL_KEY or VAULT_UNSEAL_KEY_FILE)." >&2
        wait "${VAULT_PID}"
      fi
      echo "[vault-entrypoint] Auto-unsealing Vault (source=${UNSEAL_KEY:+env}${UNSEAL_KEY:+,}${UNSEAL_KEY_FILE:+file:${UNSEAL_KEY_FILE}})..."
      ${VAULT_BIN} operator unseal "${key}"
    fi

    wait "${VAULT_PID}"
