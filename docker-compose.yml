services:
  api:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: sre-toolbox-api
    user: "${APP_UID:-1000}:${APP_GID:-1000}"
    env_file: .env
    environment:
      PYTHONPATH: /app
      DATABASE_URL: ${DATABASE_URL}
      VAULT_ADDR: ${VAULT_ADDR:-http://vault:8200}
      VAULT_TOKEN: ${VAULT_TOKEN:-}
      VAULT_TOKEN_FILE: ${VAULT_TOKEN_FILE:-}
      VAULT_NAMESPACE: ${VAULT_NAMESPACE:-}
      VAULT_KV_MOUNT: ${VAULT_KV_MOUNT:-secret}
      VAULT_TLS_SKIP_VERIFY: ${VAULT_TLS_SKIP_VERIFY:-true}
      VAULT_CA_CERT: ${VAULT_CA_CERT:-}
      VAULT_AUTH_METHOD: ${VAULT_AUTH_METHOD:-token}
      VAULT_APPROLE_ROLE_ID: ${VAULT_APPROLE_ROLE_ID:-}
      VAULT_APPROLE_SECRET_ID: ${VAULT_APPROLE_SECRET_ID:-}
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      vault:
        condition: service_started
    volumes:
      - ./data:/app/data
      - ./config:/app/config:ro
    command: >
      sh -c "alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8080"

  worker:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: sre-toolbox-worker
    user: "${APP_UID:-1000}:${APP_GID:-1000}"
    env_file: .env
    environment:
      PYTHONPATH: /app
      DATABASE_URL: ${DATABASE_URL}
      VAULT_ADDR: ${VAULT_ADDR:-http://vault:8200}
      VAULT_TOKEN: ${VAULT_TOKEN:-}
      VAULT_TOKEN_FILE: ${VAULT_TOKEN_FILE:-}
      VAULT_NAMESPACE: ${VAULT_NAMESPACE:-}
      VAULT_KV_MOUNT: ${VAULT_KV_MOUNT:-secret}
      VAULT_TLS_SKIP_VERIFY: ${VAULT_TLS_SKIP_VERIFY:-true}
      VAULT_CA_CERT: ${VAULT_CA_CERT:-}
      VAULT_AUTH_METHOD: ${VAULT_AUTH_METHOD:-token}
      VAULT_APPROLE_ROLE_ID: ${VAULT_APPROLE_ROLE_ID:-}
      VAULT_APPROLE_SECRET_ID: ${VAULT_APPROLE_SECRET_ID:-}
      CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP: ${CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP:-true}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      vault:
        condition: service_started
    volumes:
      - ./data:/app/data
      - ./config:/app/config:ro
    command: >
      sh -c "celery -A worker.worker:celery_app worker --loglevel=INFO"

  vault:
    image: hashicorp/vault:1.14
    container_name: sre-toolbox-vault
    restart: unless-stopped
    cap_add:
      - IPC_LOCK
    entrypoint: ["/vault/init-unseal.sh"]
    env_file: .env
    environment:
      VAULT_SERVER_CONFIG_PATH: /vault/config/local.hcl
    ports:
      - "${VAULT_HOST_PORT:-8200}:${VAULT_LISTEN_PORT:-8200}"
    volumes:
      - vault-data:/vault/data
      - ./config/vault:/vault/config:ro
      - ./docker/vault/entrypoint.sh:/vault/init-unseal.sh:ro

  db:
    image: postgres:15-alpine
    container_name: sre-toolbox-db
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-sretoolbox}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sretoolbox}
      POSTGRES_DB: ${POSTGRES_DB:-sretoolbox}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sretoolbox} -d ${POSTGRES_DB:-sretoolbox}"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: sre-toolbox-redis
    ports:
      - "6379:6379"

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: sre-toolbox-frontend
    env_file: .env
    ports:
      - "5173:5173"
    depends_on:
      - api
    volumes:
      - ./frontend:/app/frontend
      - /app/frontend/node_modules
      - ./toolkits:/app/toolkits
    command: ["sh", "-c", "npm install && npm run dev -- --host 0.0.0.0 --port 5173"]

volumes:
  postgres-data:
  vault-data:
